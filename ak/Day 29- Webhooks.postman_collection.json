{
	"info": {
		"_postman_id": "e04c1718-ee8d-4453-956a-e883b3ea2349",
		"name": "Day 29: Webhooks",
		"description": "## Instructions for Day 29: Webhooks\n\n1. **Get the challenge:** Fork [the parent collection `Day 29: Webhooks`](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-7d96fb0a-52d9-4c7e-b044-6f5c3f6ee12f) from the main workspace to your own public workspace.\n2. **Read the documentation:** In your fork, select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3. **Submit your solution:** Select the second folder `Submit your solution` and follow the instructions in the documentation to validate your solution.\n\n## Concepts covered\n- [Set up integrations to receive alerts](https://learning.postman.com/docs/designing-and-developing-your-api/monitoring-your-api/integrations-for-alerts/)\n- [Postman API](https://www.postman.com/postman/workspace/postman-public-workspace/documentation/12959542-c8142d51-e97c-46b6-bd77-52bb66712c9a)\n\n## Additional resources\n- [Custom webhook integrations](https://learning.postman.com/docs/integrations/webhooks/)\n\n## Next challenge\n- [Submit a pull request](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-88dc2f3e-8335-40f5-857d-cc053bdaa8ee)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Webhooks",
			"item": [
				{
					"name": "echo",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let incomingPayload = JSON.parse(globals.previousRequest).data",
									"pm.collectionVariables.set(\"newPayload\", incomingPayload.message)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"console.log('Echoing my payload: ', pm.response.json().data)",
									"postman.setNextRequest(null)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{newPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://postman-echo.com/post",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Webhook",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{postman_api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "x-api-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"webhook\":{\n        \"name\": \"{{webhook_name}}\",\n        \"collection\": \"{{collection_uid}}\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/webhooks?workspace={{workspace_id}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"webhooks"
							],
							"query": [
								{
									"key": "workspace",
									"value": "{{workspace_id}}"
								}
							]
						},
						"description": "Create a webhook that triggers a collection with your custom payload.\n\nYou can specify the webhook name and the collection to trigger by using the following attributes of the `webhook` object on your JSON body:\n\n* `name`: the name of the webhook that you're creating.\n* `collection`: the UID of the collection that you want to trigger once this webhook is called.\n\nOnce created, the webhook URL can be retrieved by accessing the `webhookUrl` attribute of the `webhook` object on the response JSON payload."
					},
					"response": [
						{
							"name": "Create Webhook",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "x-workspace-id",
										"value": "c90a3482-f80d-43d6-9dfb-0830f5e43605",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"webhook\":{\n        \"name\": \"Sample Webhook\",\n        \"collection\": \"13223329-78f7e7dd-e9f4-4607-9610-098524f06589\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/webhooks?workspace={{workspace_id}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"webhooks"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspace_id}}"
										}
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"webhook\": {\n        \"id\": \"1eba1c36-c343-4eb0-a25a-37117650e628\",\n        \"name\": \"Sample Webhook\",\n        \"collection\": \"13323329-78f7e7dd-e9f4-4607-9610-098524f06589\",\n        \"webhookUrl\": \"https://example.com/webhookUrl\",\n        \"uid\": \"13323329-1eba1c36-c343-4eb0-a25a-37117650e628\"\n    }\n}"
						}
					]
				},
				{
					"name": "Trigger Webhook",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"message\": \"yellow world\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://newman-api.getpostman.com/run/1329039/dcd3798f-82d5-4d63-8604-b0f2f1c21d70",
							"protocol": "https",
							"host": [
								"newman-api",
								"getpostman",
								"com"
							],
							"path": [
								"run",
								"1329039",
								"dcd3798f-82d5-4d63-8604-b0f2f1c21d70"
							]
						}
					},
					"response": []
				}
			],
			"description": "It's time to work on your next challenge.\n\nIn this example, we will create a webhook and trigger it, all from the same collection that we will run. That's a bit meta, but allows us to keep everything in one spot for this example. In the future, you will probably create, trigger, and run the webhook from separate entities.\n\n1. **Add a request to be run**: Add the following request called `echo` to the folder `Webhooks`.\n  - `POST` request method\n  - `https://postman-echo.com/post` request URL\n\n  Under the **Pre-request Script** tab, add this code to receive a future payload and store this information as a collection variable called `newPayload`.\n```\nlet incomingPayload = JSON.parse(globals.previousRequest).data\npm.collectionVariables.set(\"newPayload\", incomingPayload.message)\n```\n  Under the **Body** tab, add <code>\\{{newPayload\\}}</code> as a raw JSON body to send to this endpoint.\n\n  Under the **Tests** tab, add the following code.\n  - Add test to verify a successful `200` response\n  - Add `postman.setNextRequest(null)`, so that when you run the collection only the first request will execute\n  - Add `console.log('Echoing my payload: ', pm.response.json().data)` to log the payload to the console\n1. **Create a webhook**: If you haven't already, fork the [parent collection for the Postman API](https://www.postman.com/postman/workspace/postman-public-workspace/documentation/12959542-c8142d51-e97c-46b6-bd77-52bb66712c9a) into your own workspace. Find a request to `Create Webhook` and duplicate it over as the second request in the folder `Webhooks`.\n  - Set up authorization of this request using any method you prefer.\n  - Set the variables for `workspace_id`, `webhook_name`, and `collection_id` using any method you prefer. Use the ID of your current public workspace. The name of the webhook should be `echo webhook`. Use the ID of this collection.\n\n  Send the call to create the webhook, and make a note of the `webhook_url` for the next step.\n1. **Trigger the webhook**: Add the following request called `Trigger Webhook` as the third request in the folder `Webhooks`. \n  - `POST` request method\n  - The request URL is the `webhook_url` received in the previous step\n  - The request body will contain a payload with a property `message` for our first call to parse it properly, like this:\n```\n{\n    \"message\": \"yellow world\"\n}\n```\n\n  Send this call to trigger the webhook. \n1. **Verify webhook triggered**: Behind the scenes, this webhook functions like a monitor run. This means our console statements are logged in the monitor console. Select the **Monitors** tab on the left, and find the name of your webhook. Click on the last run, scroll down to see the results, and then tab over to **Console Log**. Make sure your console statement contains the payload you sent in the previous step.\n\nOnce you complete these steps, save your changes, and then move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// counter for passed tests\r",
									"let pass = 0\r",
									"let totalToPass = 6\r",
									"\r",
									"let collection = pm.response.json().collection\r",
									"\r",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {\r",
									"    pm.expect(true);\r",
									"    pass += 1\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pass += 1\r",
									"});\r",
									"\r",
									"pm.test(\"Correct collection returned\", () => {\r",
									"    pm.expect(collection.info.name).equals(\"Day 29: Webhooks\")\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"let folder = collection.item.find(fol => { return fol.name === \"Webhooks\"})\r",
									"\r",
									"pm.test(\"Requests added\", () => {\r",
									"    pm.expect(folder.item.length, 'check number of requests').equals(3)\r",
									"\r",
									"    let echoRequest = folder.item.find(req => { return req.name === \"echo\"})\r",
									"    pm.expect(echoRequest.name, 'check echo request name').equals(\"echo\")\r",
									"    pm.expect(echoRequest.request.method, 'check echo request method').equals(\"POST\")\r",
									"    pm.expect(echoRequest.request.url.raw, 'check response time url').includes(\"https://postman-echo.com/post\")\r",
									"\r",
									"    let createRequest = folder.item.find(req => { return req.name === \"Create Webhook\" | req.name === \"Create Webhook Copy\" })\r",
									"    pm.expect(createRequest.name, 'check create request name').includes(\"Create Webhook\")\r",
									"    pm.expect(createRequest.request.method, 'check create request method').equals(\"POST\")\r",
									"    pm.expect(createRequest.request.url.raw, 'check create request url').includes(\"https://api.getpostman.com/webhooks?workspace\")\r",
									"\r",
									"    let triggerRequest = folder.item.find(req => { return req.name === \"Trigger Webhook\"})\r",
									"    pm.expect(triggerRequest.name, 'check trigger request name').equals(\"Trigger Webhook\")\r",
									"    pm.expect(triggerRequest.request.method, 'check trigger request method').equals(\"POST\")\r",
									"    pm.expect(triggerRequest.request.url.raw, 'check trigger request url').includes(\"https://newman-api.getpostman.com/run\")\r",
									"\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"pm.test(\"Echo Scripts added\", () => {\r",
									"    let echoRequest = folder.item.find(req => { return req.name === \"echo\"})\r",
									"\r",
									"    pm.expect(echoRequest.request.body.raw).equals(\"{{newPayload}}\")\r",
									"\r",
									"    let preReq = echoRequest.event.find(event => {return event.listen === \"prerequest\"})\r",
									"    pm.expect(preReq.script.exec.toString(), 'check preReq previous request capture').to.include(\"globals.previousRequest\")\r",
									"    pm.expect(preReq.script.exec.toString(), 'check preReq set variable').to.include(\"pm.collectionVariables.set\")\r",
									"\r",
									"    let test = echoRequest.event.find(event => {return event.listen === \"test\"})\r",
									"    pm.expect(test.script.exec.toString(), 'check test').to.include(\"pm.test\")\r",
									"    pm.expect(test.script.exec.toString(), 'check setNextRequest test').to.include(\"postman.setNextRequest(null)\")\r",
									"    pm.expect(test.script.exec.toString(), 'check console log test').to.include(\"console.log\")\r",
									"\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"pm.test(\"Payload sent\", () => {\r",
									"    let triggerRequest = folder.item.find(req => { return req.name === \"Trigger Webhook\"})\r",
									"    pm.expect(triggerRequest.request.body.raw.toString()).includes(\"message\")\r",
									"\r",
									"        pass += 1\r",
									"})\r",
									"\r",
									"// visualization for test results\r",
									"let template\r",
									"if (pass == totalToPass) {\r",
									"    template = `🍪 passing!\r",
									"        <br />\r",
									"        <img src=\"https://media1.giphy.com/media/Y8ybhoMQg8ZZ6/giphy.gif?cid=ecf05e476lthr8qqejm0mytmax3btowdnrsu84nsv0x5c5vt&rid=giphy.gif&ct=g\" />\r",
									"    `\r",
									"} else {\r",
									"    template = `🙅 please try again\r",
									"        <br />\r",
									"        <img src=\"https://media3.giphy.com/media/5QTJd4EtCjXEd9QSy2/giphy.gif?cid=ecf05e47zzsolbpfh0h1mp0ypnqlvuzc2xtodaprxs4yrk4p&rid=giphy.gif&ct=g\" />\r",
									"    `\r",
									"}\r",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{postman_api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/collections/{{collection_uid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"{{collection_uid}}"
							]
						},
						"description": "It's time to submit your solution.\n\n1. **Use a Postman environment:** Find the `Postman API env` environment from the previous challenge. Update the `collection_uid` with the current collection's ID.\n1. **Validate your solution**: Save your changes in the collection and environment. Hit **Send** and look under the **Tests** tab of the server response at the bottom to review your test results.\n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/). When all of your tests pass, you are done with today's challenge. Remember to save your changes as you'll need to pass all the challenges to claim a **30 days of Postman** badge."
					},
					"response": []
				}
			],
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}